{"/home/travis/build/npmtest/node-npmtest-pushbullet/test.js":"/* istanbul instrument in package npmtest_pushbullet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pushbullet/lib.npmtest_pushbullet.js":"/* istanbul instrument in package npmtest_pushbullet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pushbullet = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pushbullet = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pushbullet/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pushbullet && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pushbullet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pushbullet\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pushbullet.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pushbullet.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pushbullet.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pushbullet.__dirname + '/lib.npmtest_pushbullet.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pushbullet/node_modules/pushbullet/index.js":"/*global module,require*/\nmodule.exports = require('./lib/pushbullet.js');\n","/home/travis/build/npmtest/node-npmtest-pushbullet/node_modules/pushbullet/lib/pushbullet.js":"/*global module,require*/\n\nvar http    = require('http');\nvar request = require('request');\n\nvar Stream = require('./internal/stream');\n\n/**\n * PushBullet API abstraction module.\n *\n * @param {String} apiKey PushBullet API key.\n */\nfunction PushBullet(apiKey) {\n\tif ( ! apiKey) {\n\t\tthrow new Error('API Key is required');\n\t}\n\n\tthis.apiKey = apiKey;\n\n\tthis.request = request.defaults({\n\t\theaders: {\n\t\t\t'Access-Token': apiKey\n\t\t},\n\t\tjson: true\n\t});\n}\n\nPushBullet.API_BASE = 'https://api.pushbullet.com/v2';\nPushBullet.DEVICES_END_POINT  = PushBullet.API_BASE + '/devices';\nPushBullet.PUSH_END_POINT     = PushBullet.API_BASE + '/pushes';\nPushBullet.UPLOAD_END_POINT   = PushBullet.API_BASE + '/upload-request';\nPushBullet.USERS_END_POINT    = PushBullet.API_BASE + '/users';\nPushBullet.SUBS_END_POINT     = PushBullet.API_BASE + '/subscriptions';\nPushBullet.CHANNELS_END_POINT = PushBullet.API_BASE + '/channel-info';\nPushBullet.CHATS_END_POINT    = PushBullet.API_BASE + '/chats';\nPushBullet.EPHEMERALS_END_POINT = PushBullet.API_BASE + '/ephemerals';\n\nmodule.exports = PushBullet;\n\n/**\n * Return a new stream listener.\n *\n * @return {Stream} Stream listener.\n */\nPushBullet.prototype.stream = function stream() {\n\treturn new Stream(this.apiKey);\n};\n\n/**\n * Performs a GET request to an end point.\n *\n * Options passed are added to the end point as a query string.\n *\n * @param  {String}   endPoint URL to send GET request to.\n * @param  {Object}   options  Key/value options used as query string parameters.\n * @param  {Function} callback Called when the request is complete.\n */\nPushBullet.prototype.getList = function getList(endPoint, options, callback) {\n\tvar self = this;\n\n\tif ( ! callback) {\n\t\tcallback = options;\n\t\toptions = {};\n\t}\n\n\tvar parameters = {};\n\n\tvar optionKeys = Object.keys(options);\n\tif (optionKeys.length > 0) {\n\n\t\tparameters.qs = {};\n\n\t\toptionKeys.forEach(function(key) {\n\t\t\tparameters.qs[key] = options[key];\n\t\t});\n\t}\n\n\tself.request.get(endPoint, parameters, function(error, response, body) {\n\t\tself.handleResponse(error, response, body, callback);\n\t});\n};\n\n/**\n * Handle the API request responses.\n *\n * If there is a request error or the response code is not 200\n * an error will be passed to the callback.\n *\n * For a successful request the parsed JSON will be passed to the callback.\n *\n * @param  {Error}      error    Request error.\n * @param  {Response}   response Response object.\n * @param  {String}     body     Response body.\n * @param  {Function} callback   Callback for when the request is complete.\n */\nPushBullet.prototype.handleResponse = function handleResponse(error, response, body, callback) {\n\tif (error || response.statusCode !== 200) {\n\t\tthis.handleError(error, response, body, callback);\n\t\treturn;\n\t}\n\n\tif (typeof callback === 'function') {\n\t\tcallback(null, body);\n\t}\n};\n\n/**\n * Handle errors or error responses.\n *\n * @param  {Error}      error    Request error.\n * @param  {Response}   response Response object.\n * @param  {String}     body     Response body.\n * @param  {Function} callback   Callback for when the request is complete.\n */\nPushBullet.prototype.handleError = function handleError(error, response, body, callback) {\n\tif (error) {\n\t\tif (typeof callback === 'function') {\n\t\t\tcallback(error);\n\t\t}\n\t\treturn;\n\t}\n\n\tif (response.statusCode !== 200) {\n\t\tif (typeof callback === 'function') {\n\t\t\tif (body.error && body.error.message) {\n\t\t\t\tcallback(new Error(body.error.message));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcallback(new Error(http.STATUS_CODES[response.statusCode]));\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\n\tif (typeof callback === 'function') {\n\t\tcallback();\n\t}\n};\n\nrequire('./internal/chats');\nrequire('./internal/devices');\nrequire('./internal/ephemerals');\nrequire('./internal/pushes');\nrequire('./internal/subscriptions');\nrequire('./internal/users');\n","/home/travis/build/npmtest/node-npmtest-pushbullet/node_modules/pushbullet/lib/internal/stream.js":"/*global module,require*/\n\nvar util   = require('util');\nvar events = require('events');\nvar WebSocketClient = require('websocket').client;\n\nvar STREAM_BASE = 'wss://stream.pushbullet.com/websocket';\n\n/**\n * Event emitter for the Pushbullet streaming API.\n *\n * @param {String} apiKey PushBullet API key.\n */\nfunction Stream(apiKey) {\n\tvar self = this;\n\n\tself.apiKey = apiKey;\n\n\tevents.EventEmitter.call(self);\n\n\tself.client = new WebSocketClient();\n\n\tself.client.on('connectFailed', function(error) {\n\t\tself.emit('error', error);\n\t});\n\n\tself.client.on('connect', function(connection) {\n\n\t\tself.connection = connection;\n\n\t\tself.emit('connect');\n\n\t\tconnection.on('error', function(error) {\n\t\t\tself.emit('error', error);\n\t\t});\n\n\t\tconnection.on('close', function() {\n\t\t\tself.emit('close');\n\t\t});\n\n\t\tconnection.on('message', function(message) {\n\t\t\tif (message.type === 'utf8') {\n\t\t\t\tvar data = JSON.parse(message.utf8Data);\n\t\t\t\tself.emit('message', data);\n\n\t\t\t\tif (data.type === 'nop') {\n\t\t\t\t\tself.emit('nop');\n\t\t\t\t}\n\t\t\t\telse if (data.type === 'tickle') {\n\t\t\t\t\tself.emit('tickle', data.subtype);\n\t\t\t\t}\n\t\t\t\telse if (data.type === 'push') {\n\t\t\t\t\tself.emit('push', data.push);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\nutil.inherits(Stream, events.EventEmitter);\n\nmodule.exports = Stream;\n\n/**\n * Connect to the stream.\n */\nStream.prototype.connect = function connect() {\n\tthis.client.connect(STREAM_BASE + '/' + this.apiKey);\n};\n\n/**\n * Disconnect from the stream.\n */\nStream.prototype.close = function close() {\n\tthis.connection.close();\n};\n","/home/travis/build/npmtest/node-npmtest-pushbullet/node_modules/pushbullet/lib/internal/chats.js":"var PushBullet = require('../pushbullet');\n\n/**\n * Get a list of current chats.\n *\n * @param  {Object}   options  Optional options object.\n * @param  {Function} callback Called when the request is complete.\n */\nPushBullet.prototype.chats = function chats(options, callback) {\n\tvar self = this;\n\n\tif ( ! callback) {\n\t\tcallback = options;\n\t\toptions = {\n\t\t\tactive: true\n\t\t};\n\t}\n\n\tif (options.active === undefined) {\n\t\toptions.active = true;\n\t}\n\n\tself.getList(PushBullet.CHATS_END_POINT, options, callback);\n};\n\n/**\n * Create a new chat.\n *\n * @param {String}   channelTag Email of the person to create the chat with.\n * @param {Function} callback   Called when the request is complete.\n */\nPushBullet.prototype.createChat = function createChat(email, callback) {\n\tvar self = this;\n\n\tvar options = {\n\t\tjson: {\n\t\t\temail: email\n\t\t}\n\t};\n\n\tself.request.post(PushBullet.CHATS_END_POINT, options, function(error, response, body) {\n\t\tself.handleResponse(error, response, body, callback);\n\t});\n};\n\n/**\n * Mute a chat.\n *\n * @param {String}   chatIden The iden of the chat to mute.\n * @param {Function} callback Called when the request is complete.\n */\nPushBullet.prototype.muteChat = function muteChat(chatIden, callback) {\n\tthis.updateChat(chatIden, { muted: true }, callback);\n};\n\n/**\n * Unmute chat.\n *\n * @param {String}   chatIden The iden of the chat to unmute.\n * @param {Function} callback Called when the request is complete.\n */\nPushBullet.prototype.unmuteChat = function unmuteChat(chatIden, callback) {\n\tthis.updateChat(chatIden, { muted: false }, callback);\n};\n\n/**\n * Update a chat.\n *\n * @param {String}   chatIden The iden of the chat to ubsubscribe from.\n * @param {Object}   updates  Updates to make to chat.\n * @param {Function} callback Called when the request is complete.\n */\nPushBullet.prototype.updateChat = function updateChat(chatIden, updates, callback) {\n\tvar self = this;\n\n\tif ( ! callback) {\n\t\tcallback = updates;\n\t}\n\n\tvar options = {\n\t\tjson: updates\n\t};\n\n\tself.request.post(PushBullet.CHATS_END_POINT + '/' + chatIden, options, function(error, response, body) {\n\t\tself.handleResponse(error, response, body, callback);\n\t});\n};\n\n/**\n * Delete a chat.\n *\n * @param {String}   chatIden The iden of the chat to delete.\n * @param {Function} callback Called when the request is complete.\n */\nPushBullet.prototype.deleteChat = function deleteChat(chatIden, callback) {\n\tvar self = this;\n\n\tself.request.post(PushBullet.CHATS_END_POINT + '/' + chatIden, function(error, response, body) {\n\t\tself.handleResponse(error, response, body, callback);\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-pushbullet/node_modules/pushbullet/lib/internal/devices.js":"var PushBullet = require('../pushbullet');\n\n/**\n * Get a list of devices which can be pushed to.\n *\n * The `options` parameter can use two attributes `cursor` and `limit`\n * to control the data returned.\n *\n * - `active` is used to restrict the results to only active devices.\n * - `cursor` is used to select the page if the results have been paginated.\n * - `limit` is used to limit the number of objects in the reponse.\n *\n * @param  {Object}   options  Optional options object.\n * @param  {Function} callback Callback for when the request is complete.\n */\nPushBullet.prototype.devices = function devices(options, callback) {\n\tvar self = this;\n\n\tif ( ! callback) {\n\t\tcallback = options;\n\t\toptions = {\n\t\t\tactive: true\n\t\t};\n\t}\n\n\tif (options.active === undefined) {\n\t\toptions.active = true;\n\t}\n\n\tself.getList(PushBullet.DEVICES_END_POINT, options, callback);\n};\n\n/**\n * Create a new device.\n *\n * @param  {Object}   deviceOptions Object of device options.\n * @param  {Function} callback      Called when the request is complete.\n */\nPushBullet.prototype.createDevice = function createDevice(deviceOptions, callback) {\n\tvar self = this;\n\n\tvar options = {\n\t\tjson: deviceOptions\n\t};\n\n\tself.request.post(PushBullet.DEVICES_END_POINT, options, function(error, response, body) {\n\t\tself.handleResponse(error, response, body, callback);\n\t});\n};\n\n/**\n * Update new device.\n *\n * @param  {Object}   deviceOptions Object of device options.\n * @param  {Function} callback      Called when the request is complete.\n */\nPushBullet.prototype.updateDevice = function updateDevice(deviceIden, deviceOptions, callback) {\n\tvar self = this;\n\n\tvar options = {\n\t\tjson: deviceOptions\n\t};\n\n\tself.request.post(PushBullet.DEVICES_END_POINT + '/' + deviceIden, options, function(error, response, body) {\n\t\tself.handleResponse(error, response, body, callback);\n\t});\n};\n\n/**\n * Delete a device.\n *\n * @param  {String}   deviceIden Device IDEN of the device to delete.\n * @param  {Function} callback   Called when the request is complete.\n */\nPushBullet.prototype.deleteDevice = function deleteDevice(deviceIden, callback) {\n\tvar self = this;\n\n\tself.request.del(PushBullet.DEVICES_END_POINT + '/' + deviceIden, function(error, response, body) {\n\t\tself.handleResponse(error, response, body, callback);\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-pushbullet/node_modules/pushbullet/lib/internal/ephemerals.js":"var clone = require('clone');\n\nvar PushBullet = require('../pushbullet');\n\n/**\n * Send an SMS.\n *\n * The options require source_user_iden, target_device_iden, conversation_iden and message.\n * See https://docs.pushbullet.com/#send-sms for details.\n *\n * @param  {Object}   smsOptions SMS options.\n * @param  {Function} callback   Callback for when the request is complete.\n */\nPushBullet.prototype.sendSMS = function sendSMS(smsOptions, callback) {\n\tvar options = clone(smsOptions);\n\n\toptions.package_name = 'com.pushbullet.android';\n\toptions.type = 'messaging_extension_reply';\n\n\tthis.sendEphemeral(options, callback);\n};\n\n/**\n * Send clipboard content.\n *\n * The options require body, source_user_iden and source_device_iden.\n * See https://docs.pushbullet.com/#universal-copypaste for details.\n *\n * @param  {Object}   clipOptions Clipboard options.\n * @param  {Function} callback    Callback for when the request is complete.\n */\nPushBullet.prototype.sendClipboard = function sendClipboard(clipOptions, callback) {\n\tvar options = clone(clipOptions);\n\n\toptions.type = 'clip';\n\n\tthis.sendEphemeral(options, callback);\n};\n\n/**\n * Dismiss an ephemeral.\n *\n * The options require package_name, notification_id, notification_tag and source_user_iden.\n * See https://docs.pushbullet.com/#dismissal-ephemeral for details.\n *\n * @param  {Object}   ephemerealOptions Ephemeral dismissal options.\n * @param  {Function} callback          Callback for when the request is complete.\n */\nPushBullet.prototype.dismissEphemeral = function dismissEphemeral(ephemerealOptions, callback) {\n\tvar options = clone(ephemerealOptions);\n\n\toptions.type = 'dismissal';\n\n\tthis.sendEphemeral(options, callback);\n};\n\n/**\n * Send an ephemeral.\n *\n * @param  {Object}   ephemerealOptions Ephemeral options.\n * @param  {Function} callback          Callback for when the request is complete.\n */\nPushBullet.prototype.sendEphemeral = function sendEphemeral(ephemerealOptions, callback) {\n\tvar self = this;\n\n\tvar options = {\n\t\tjson: {\n\t\t\ttype: 'push',\n\t\t\tpush: ephemerealOptions\n\t\t}\n\t};\n\n\tself.request.post(PushBullet.EPHEMERALS_END_POINT, options, function(error, response, body) {\n\t\tself.handleResponse(error, response, body, callback);\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-pushbullet/node_modules/pushbullet/lib/internal/pushes.js":"var fs      = require('fs');\nvar http    = require('http');\nvar mime    = require('mime');\nvar path    = require('path');\nvar request = require('request');\n\nvar PushBullet = require('../pushbullet');\n\n/**\n * Push a note to a device.\n *\n * @param  {String}   deviceParams Push device parameters. See push().\n * @param  {String}   title        Title of note.\n * @param  {String}   body         Body of note.\n * @param  {Function} callback     Callback for when request is complete.\n */\nPushBullet.prototype.note = function note(deviceParams, title, body, callback) {\n\tthis.push(deviceParams, {\n\t\ttype: 'note',\n\t\ttitle: title,\n\t\tbody: body\n\t}, callback);\n};\n\n/**\n * Push a link to a device.\n *\n * @param  {String}   deviceParams Push device parameters. See push().\n * @param  {String}   title        Name of address.\n * @param  {String}   url          URL to push.\n * @param  {Function} callback     Callback for when the request is complete.\n */\nPushBullet.prototype.link = function link(deviceParams, title, url, callback) {\n\tthis.push(deviceParams, {\n\t\ttype: 'link',\n\t\ttitle: title,\n\t\turl: url\n\t}, callback);\n};\n\n/**\n * Push a file to a device.\n *\n * @param  {String}   deviceParams Push device parameters. See push().\n * @param  {String}   filePath     Path to file.\n * @param  {String}   message      Optional message to send with file.\n * @param  {Function} callback     Callback for when the request is complete.\n */\nPushBullet.prototype.file = function file(deviceParams, filePath, message, callback) {\n\tvar self = this;\n\n\tif ( ! callback) {\n\t\tcallback = message;\n\t\tmessage = null;\n\t}\n\n\tfs.stat(filePath, function(error, stats) {\n\t\tif (error) {\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\tcallback(error);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tvar fileName = path.basename(filePath);\n\t\tvar fileType = mime.lookup(filePath);\n\n\t\tvar authOptions = {\n\t\t\tqs: {\n\t\t\t\tfile_name: fileName,\n\t\t\t\tfile_type: fileType\n\t\t\t}\n\t\t};\n\n\t\tself.request.get(PushBullet.UPLOAD_END_POINT, authOptions, function(error, response, body) {\n\t\t\tif (error || response.statusCode !== 200) {\n\t\t\t\tself.handleError(error, response, body, callback);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Not posting to the API so not using `this.request`\n\t\t\tvar req = request.post(body.upload_url, function(error, response) {\n\t\t\t\tif (error || response.statusCode !== 204) {\n\t\t\t\t\tif (typeof callback === 'function') {\n\t\t\t\t\t\tif ( ! error) {\n\t\t\t\t\t\t\terror = new Error(http.STATUS_CODES[response.statusCode]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcallback(error);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar parameters = {\n\t\t\t\t\ttype: 'file',\n\t\t\t\t\tfile_name: fileName,\n\t\t\t\t\tfile_type: fileType,\n\t\t\t\t\tfile_url: body.file_url\n\t\t\t\t};\n\n\t\t\t\tif (message) {\n\t\t\t\t\tparameters.body = message;\n\t\t\t\t}\n\n\t\t\t\tself.push(deviceParams, parameters, callback);\n\t\t\t});\n\n\t\t\tvar form = req.form();\n\t\t\tObject.keys(body.data).forEach(function(key) {\n\t\t\t\tform.append(key, body.data[key]);\n\t\t\t});\n\t\t\tvar stream = fs.createReadStream(filePath);\n\t\t\tform.append('file', stream);\n\n\t\t});\n\t});\n\n};\n\n/**\n * Push 'something' to a device.\n *\n * @param  {Mixed}    deviceParams Device parameters.\n * @param  {Object}   bullet       Request parameters as described on https://www.pushbullet.com/api\n * @param  {Function} callback     Callback for when the request is complete.\n */\nPushBullet.prototype.push = function push(deviceParams, bullet, callback) {\n\tvar self = this;\n\n\t// If deviceParams is a string it could be a contact email or device iden.\n\tif (typeof deviceParams === 'string') {\n\t\tif (deviceParams.indexOf('@') !== -1) {\n\t\t\tbullet.email = deviceParams;\n\t\t}\n\t\telse {\n\t\t\tbullet.device_iden = deviceParams;\n\t\t}\n\t}\n\t// If it's a number it's an old style device id.\n\telse if (typeof deviceParams === 'number') {\n\t\tbullet.device_id = deviceParams;\n\t}\n\t// If it's an object assume it defines a property of\n\t// - device_id\n\t// - device_iden\n\t// - email\n\t// - channel_tag\n\t// - client_iden\n\t// and optionally source_device_iden\n\telse if (typeof deviceParams === 'object') {\n\t\tfor (var param in deviceParams) {\n\t\t\tbullet[param] = deviceParams[param];\n\t\t}\n\t}\n\n\tvar req = self.request.post(PushBullet.PUSH_END_POINT, { json: bullet }, function(error, response, body) {\n\t\tself.handleResponse(error, response, body, callback);\n\t});\n};\n\n/**\n * Get the push history.\n *\n * The `options` parameter can use three attributes `cursor`, `limit`\n * and `modified_after` to control the data returned.\n *\n * - `active` is used to only select undeleted pushes.\n * - `cursor` is used to select the page if the results have been paginated.\n * - `limit` is used to limit the number of objects in the reponse.\n * - `modified_after` should be a timestamp.\n *\n * @param  {Object}   options  Optional options object.\n * @param  {Function} callback Called when the request is complete.\n */\nPushBullet.prototype.history = function history(options, callback) {\n\tvar self = this;\n\n\tif ( ! callback) {\n\t\tcallback = options;\n\t\toptions = {\n\t\t\tactive: true,\n\t\t\tmodified_after: 0\n\t\t};\n\t}\n\n\tif (options.active === undefined) {\n\t\toptions.active = true;\n\t}\n\n\tif (options.modified_after === undefined) {\n\t\toptions.modified_after = 0;\n\t}\n\n\tself.getList(PushBullet.PUSH_END_POINT, options, callback);\n};\n\n/**\n * Dismiss a push.\n *\n * @param  {String}   pushIden Push IDEN of the push to update.\n * @param  {Object}   updates  Updates to make to push.\n * @param  {Function} callback Called when the request is complete.\n */\nPushBullet.prototype.dismissPush = function dismissPush(pushIden, callback) {\n\tthis.updatePush(pushIden, { dismissed: true }, callback);\n};\n\n/**\n * Update a push.\n *\n * @param  {String}   pushIden Push IDEN of the push to update.\n * @param  {Object}   updates  Updates to make to push.\n * @param  {Function} callback Called when the request is complete.\n */\nPushBullet.prototype.updatePush = function updatePush(pushIden, updates, callback) {\n\tvar self = this;\n\n\tif ( ! callback) {\n\t\tcallback = updates;\n\t}\n\n\tvar options = {\n\t\tjson: updates\n\t};\n\n\tself.request.post(PushBullet.PUSH_END_POINT + '/' + pushIden, options, function(error, response, body) {\n\t\tself.handleResponse(error, response, body, callback);\n\t});\n};\n\n/**\n * Delete a push.\n *\n * @param  {String}   pushIden Push IDEN of the push to delete.\n * @param  {Function} callback Called when the request is complete.\n */\nPushBullet.prototype.deletePush = function deletePush(pushIden, callback) {\n\tvar self = this;\n\n\tself.request.del(PushBullet.PUSH_END_POINT + '/' + pushIden, function(error, response, body) {\n\t\tself.handleResponse(error, response, body, callback);\n\t});\n};\n\n/**\n * Delete all pushes belonging to the current user.\n *\n * @param  {Function} callback Called when the request is complete.\n */\nPushBullet.prototype.deleteAllPushes = function deleteAllPushes(callback) {\n\tvar self = this;\n\n\tself.request.del(PushBullet.PUSH_END_POINT, function(error, response, body) {\n\t\tself.handleResponse(error, response, body, callback);\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-pushbullet/node_modules/pushbullet/lib/internal/subscriptions.js":"var PushBullet = require('../pushbullet');\n\n/**\n * Get a list of current subscriptions.\n *\n * @param  {Object}   options  Optional options object.\n * @param  {Function} callback Called when the request is complete.\n */\nPushBullet.prototype.subscriptions = function subscriptions(options, callback) {\n\tvar self = this;\n\n\tif ( ! callback) {\n\t\tcallback = options;\n\t\toptions = {\n\t\t\tactive: true\n\t\t};\n\t}\n\n\tif (options.active === undefined) {\n\t\toptions.active = true;\n\t}\n\n\tself.getList(PushBullet.SUBS_END_POINT, options, callback);\n};\n\n/**\n * Subscribe to a channel.\n *\n * @param {String}   channelTag The tag of the channel to subscribe to.\n * @param {Function} callback   Called when the request is complete.\n */\nPushBullet.prototype.subscribe = function subscribe(channelTag, callback) {\n\tvar self = this;\n\n\tvar options = {\n\t\tjson: {\n\t\t\tchannel_tag: channelTag\n\t\t}\n\t};\n\n\tself.request.post(PushBullet.SUBS_END_POINT, options, function(error, response, body) {\n\t\tself.handleResponse(error, response, body, callback);\n\t});\n};\n\n/**\n * Unsubscribe from a channel.\n *\n * @param {String}   subscriptionIden The iden of the subscription to ubsubscribe from.\n * @param {Function} callback         Called when the request is complete.\n */\nPushBullet.prototype.unsubscribe = function unsubscribe(subscriptionIden, callback) {\n\tvar self = this;\n\n\tself.request.post(PushBullet.SUBS_END_POINT + '/' + subscriptionIden, function(error, response, body) {\n\t\tself.handleResponse(error, response, body, callback);\n\t});\n};\n\n/**\n * Mute a subscription.\n *\n * @param {String}   subscriptionIden The iden of the subscription to mute.\n * @param {Function} callback         Called when the request is complete.\n */\nPushBullet.prototype.muteSubscription = function muteSubscription(subscriptionIden, callback) {\n\tthis.updateSubscription(subscriptionIden, { muted: true }, callback);\n};\n\n/**\n * Unmute subscription.\n *\n * @param {String}   subscriptionIden The iden of the subscription to unmute.\n * @param {Function} callback         Called when the request is complete.\n */\nPushBullet.prototype.unmuteSubscription = function unmuteSubscription(subscriptionIden, callback) {\n\tthis.updateSubscription(subscriptionIden, { muted: false }, callback);\n};\n\n/**\n * Update a subscription.\n *\n * @param {String}   subscriptionIden The iden of the subscription to ubsubscribe from.\n * @param {Object}   updates          Updates to make to subscription.\n * @param {Function} callback         Called when the request is complete.\n */\nPushBullet.prototype.updateSubscription = function updateSubscription(subscriptionIden, updates, callback) {\n\tvar self = this;\n\n\tif ( ! callback) {\n\t\tcallback = updates;\n\t}\n\n\tvar options = {\n\t\tjson: updates\n\t};\n\n\tself.request.post(PushBullet.SUBS_END_POINT + '/' + subscriptionIden, options, function(error, response, body) {\n\t\tself.handleResponse(error, response, body, callback);\n\t});\n};\n\n/**\n * Get information about a channel.\n *\n * @param {String}   channelTag The tag of the channel to get information about.\n * @param {Function} callback   Called when the request is complete.\n */\nPushBullet.prototype.channelInfo = function channelInfo(channelTag, callback) {\n\tvar self = this;\n\n\tvar options = {\n\t\tqs: {\n\t\t\ttag: channelTag\n\t\t}\n\t};\n\n\tself.request.get(PushBullet.CHANNELS_END_POINT, options, function(error, response, body) {\n\t\tself.handleResponse(error, response, body, callback);\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-pushbullet/node_modules/pushbullet/lib/internal/users.js":"var PushBullet = require('../pushbullet');\n\n/**\n * Get information for the current user.\n *\n * @param  {Function} callback Callback for when the request is complete.\n */\nPushBullet.prototype.me = function me(callback) {\n\tvar self = this;\n\n\tself.request.get(PushBullet.USERS_END_POINT + '/me', function(error, response, body) {\n\t\tself.handleResponse(error, response, body, callback);\n\t});\n};\n"}